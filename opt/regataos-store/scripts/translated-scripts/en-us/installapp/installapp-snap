#! /bin/sh

# Settings and variables
#App name and more information
app_name="$name"
app_nickname="$nickname"
command_install="$package"
appname=$(echo $package | sed 's/ --classic\| --beta//')
package_size=$(snap info $appname | grep stable | awk '{print $5}' | sed '/^$/d' | head -1 | tail -1 | sed 's/MB/ MB/' | sed 's/KB/ KB/' | sed 's/GB/ GB/')

#Variables for notifications
success_notify_title="$app_name successfully installed!"
success_notify_text=""
error_notify_title="$app_name installation error!"
error_notify_text="There was an error installing $app_name."

#General information
installation_start="Starting installation..."
installation_queue="Pending installations: occupied installer..."
installation_queue_packagekitd="Pending installations: updating the system..."
app_name_process="Install $app_name"
app_download_status="Downloading $app_name..."
app_install_status="Installing $app_name..."
success_installation="Concluded!"
installation_error="Error!"
installation_error_status="Installation error!"
progressbar_dir="/tmp/progressbar-store"
installed_apps="/opt/regataos-store/installed-apps/installed-apps.txt"

# Notify
#Successful installation
function success_installation() {
    # All settings
    user=$(users | awk '{print $1}')
    user_id=$(id -u $user)

    title=$success_notify_title
    message=$success_notify_text

    sudo -u $user DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$user_id/bus notify-send -i emblem-ok-symbolic -u normal -a 'Regata OS Store' "$title" "$message"
}

#Installation failed
function installation_failed() {
    # All settings
    user=$(users | awk '{print $1}')
    user_id=$(id -u $user)

    title=$error_notify_title
    message=$error_notify_text

    sudo -u $user DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$user_id/bus notify-send -i emblem-important-symbolic -u normal -a 'Regata OS Store' "$title" "$message"
}

# Download and Install app
function Install_app() {
	# Starting installation
    echo $app_name > $progressbar_dir/app-name
    echo $installation_start > $progressbar_dir/status
    echo "" > $progressbar_dir/progress
    echo "installing" > $progressbar_dir/installing
    echo "installing" > $progressbar_dir/installing-$app_nickname
    echo "show progress bar" > $progressbar_dir/progressbar
    echo "installing" > $progressbar_dir/progress-movement

	# Fix snap
	if test ! -e /usr/share/regataos/create-iso.txt ; then
		systemctl enable --now snapd.socket || true
		systemctl start snapd.socket || true
		sudo snap install core
		sudo snap refresh core
	fi

    # Download and install
    #Prepare the progress bar and downloading
    rm -f $progressbar_dir/progress-movement
    echo "installing" > $progressbar_dir/installing
    echo "installing" > $progressbar_dir/installing-$app_nickname
    echo $app_name > $progressbar_dir/app-name
    echo "0%" > $progressbar_dir/progress
    echo $app_download_status > $progressbar_dir/status
    sleep 1
    echo "show progress bar" > $progressbar_dir/progressbar
    chmod 777 /tmp/progressbar-store/*

    #Install with snap
    echo $package_size > $progressbar_dir/download-size
    rm -f $progressbar_dir/download-percentage
    script -q -c "snap install $command_install" | (pv -n > $progressbar_dir/snap-download-percentage) 2>&1

    chmod 777 /tmp/progressbar-store/*
}

# Check if the application is already being installed
if test ! -e "$progressbar_dir/installing-$app_nickname" ; then

    # If the installation queue is free, start installing this application
    if test -e "$progressbar_dir/installing" ; then
	    # Put the process in the installation queue
	    kmsg=$(grep -r $app_nickname $progressbar_dir/queued-process)
	    if [[ $kmsg != *"$app_nickname"* ]]; then
			chmod 777 /tmp/progressbar-store/*
		    echo "$app_nickname=install process-$app_name_process" >> $progressbar_dir/queued-process
	    fi

	    #I'm in the process queue, see you later
	    exit 0
    fi

    # Make sure the installer is busy
    ps -C packagekitd > /dev/null
    if [ $? = 0 ]
    then
        echo "packagekitd is here"
        ps -C rpm > /dev/null
        if [ $? = 0 ]
        then
		    echo "Installation in queue, rpm is here"

	        # Put the process in the installation queue
	        kmsg=$(grep -r $app_nickname $progressbar_dir/queued-process)
	        if [[ $kmsg != *"$app_nickname"* ]]; then
		        chmod 777 /tmp/progressbar-store/*
		        echo "$app_nickname=install process-$installation_queue_packagekitd" >> $progressbar_dir/queued-process
                echo "" > $progressbar_dir/progress
                echo "installing" > $progressbar_dir/progress-movement
                echo $installation_queue > $progressbar_dir/status
                echo "show progress bar" > $progressbar_dir/progressbar
	        fi

	        #I'm in the process queue, see you later
            chmod 777 /tmp/progressbar-store/*
	        exit 0

        else
		    echo "rpm is not here"
		    echo "closing packagekitd"
		    killall packagekitd
        fi
    fi

    ps -C zypper > /dev/null
    if [ $? = 0 ]
    then
		echo "Installation in queue, zypper is here"

	    # Put the process in the installation queue
	    kmsg=$(grep -r $app_nickname $progressbar_dir/queued-process)
	    if [[ $kmsg != *"$app_nickname"* ]]; then
		    chmod 777 /tmp/progressbar-store/*
		    echo "$app_nickname=install process-$installation_queue" >> $progressbar_dir/queued-process
            echo "" > $progressbar_dir/progress
            echo "installing" > $progressbar_dir/progress-movement
            echo $installation_queue > $progressbar_dir/status
            echo "show progress bar" > $progressbar_dir/progressbar
	    fi

	    #I'm in the process queue, see you later
        chmod 777 /tmp/progressbar-store/*
	    exit 0
    fi

    ps -C yast2 > /dev/null
    if [ $? = 0 ]
    then
		echo "Installation in queue, yast2 is here"

	    # Put the process in the installation queue
	    kmsg=$(grep -r $app_nickname $progressbar_dir/queued-process)
	    if [[ $kmsg != *"$app_nickname"* ]]; then
		    chmod 777 /tmp/progressbar-store/*
		    echo "$app_nickname=install process-$installation_queue" >> $progressbar_dir/queued-process
            echo "" > $progressbar_dir/progress
            echo "installing" > $progressbar_dir/progress-movement
            echo $installation_queue > $progressbar_dir/status
            echo "show progress bar" > $progressbar_dir/progressbar
	    fi

	    #I'm in the process queue, see you later
        chmod 777 /tmp/progressbar-store/*
	    exit 0
    fi

    # Install app
    Install_app

    # Confirm installation
    if [[ $(snap list) == *"$appname"* ]]; then
		chmod 777 /tmp/progressbar-store/*
	    rm -f $progressbar_dir/progress-movement
	    echo "completed" > $progressbar_dir/progress-full
	    echo "" > $progressbar_dir/status
	    echo $success_installation > $progressbar_dir/progress
        echo "$app_nickname" >> $installed_apps
		chmod 777 /tmp/progressbar-store/*
	    sleep 1
        #Clear cache
	    rm -f $progressbar_dir/progress-full
	    rm -f $progressbar_dir/installing
	    rm -f $progressbar_dir/installing-$app_nickname
	    success_installation

	    #If there are no more processes, clear the progress bar cache
	    if test ! -e "$progressbar_dir/queued-1" ; then
			chmod 777 /tmp/progressbar-store/*
		    rm -f $progressbar_dir/progressbar
		    rm -f $progressbar_dir/*
	    fi

        # Start prime config
        /bin/sh /opt/regataos-prime/scripts/apps-hybrid-graphics
    else
		chmod 777 /tmp/progressbar-store/*
	    rm -f $progressbar_dir/progress-movement
	    rm -f $progressbar_dir/progress-full
	    echo $installation_error > $progressbar_dir/progress
	    echo $installation_error_status > $progressbar_dir/status
	    sudo rm -f /etc/zypp/repos.d/gqrx.repo
	    installation_failed
		chmod 777 /tmp/progressbar-store/*
	    sleep 3
        #Clear cache
	    rm -f $progressbar_dir/installing
	    rm -f $progressbar_dir/installing-$app_nickname

	    # If there are no more processes, clear the progress bar cache
	    if test ! -e "$progressbar_dir/queued-1" ; then
			chmod 777 /tmp/progressbar-store/*
		    rm -f $progressbar_dir/progressbar
		    rm -f $progressbar_dir/*
	    fi
    fi
fi
